################################################################################
#
# Filename:	makefile_rules.Darwin
#
# Purpose:	Definitions, and implicit rules for baseline makefiles
################################################################################
# This definition forces make to use sh for subshells
SHELL=/bin/sh

################################################################################
#	Macros

ARCHFLGS = #-m32
MEX      = mex
MEXEXT   = mexmac

# Defines for Graphics (X, OGL, GLUT)
GLUTINC   =	-I/System/Library/Frameworks/GLUT.framework/Headers
GLUTLIBS  =	-framework GLUT
OGLINC    =	-I/System/Library/Frameworks/OpenGL.framework/Headers
OGLLIBS   =	-framework OpenGL -lobjc

# Compiler
CFLAGS   = $(ARCHFLGS) $(CXTRA) 
CC       = gcc
# Linker
LDFLAGS  = $(ARCHFLGS) $(LDXTRA)
LD       = ld

# Archiver and indexer
AR       = ar
ARFLAGS  = r 
RANLIB   = ranlib
RLIBARGS = 

# files removal
RM     = rm -f

.SUFFIXES: 
.SUFFIXES: .c .o

################################################################################
#	Inference rules

# .f.a :
# 	@ echo Compiling $(<F) and placing into library $(@F) ...
# 	$(FC) -c $(FFLAGS) $*.f $(FFOUT)
# 	$(AR) $(ARFLAGS) $@ $*.o
# 	$(RANLIB) $(RLIBARGS) $@
# 	rm -f $*.o
# 
# .for.a :
# 	@ echo Compiling $(<F) and placing into library $(@F) ...
# 	$(FC) -c $(FFLAGS) $*.f $(FFOUT)
# 	$(AR) $(ARFLAGS) $@ $*.o
# 	$(RANLIB) $(RLIBARGS) $@
# 	rm -f $*.o
 
# .c.a :
(%.o): %.c
	@echo Compiling $(<F) and placing into library $(@F) ...
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $(shell pwd)/$< 
	$(AR) $(ARFLAGS) $@ $*.o
	$(RM) $*.o

# .cpp.a :
# 	@ echo Compiling $(<F) and placing into library $(@F) ...
# 	$(CXX) $(CXFLAGS) -c `pwd`/$< $(CCOUT)
# 	$(AR) $(ARFLAGS) $@ $*.o
# 	$(RANLIB) $(RLIBARGS) $@
# 	@rm -f $*.o
# 
# .cxx.a :
# 	@ echo Compiling $(<F) and placing into library $(@F) ...
# 	$(CXX) $(CXFLAGS) -c `pwd`/$< $(CCOUT)
# 	$(AR) $(ARFLAGS) $@ $*.o
# 	$(RANLIB) $(RLIBARGS) $@
# 	@rm -f $*.o
# 
# .f.o :
# 	@ echo Compiling $(<F) ...
# 	@rm -f $*.o
# 	$(FC) -c $(FFLAGS) $*.f $(FFOUT)
# 
# .for.o :
# 	@ echo Compiling $(<F) ...
# 	@rm -f $*.o
# 	$(FC) -c $(FFLAGS) $*.f $(FFOUT)
 
#.c.o :
%.o : %.c 
	@ echo Compiling $(<F) ...
	$(RM) $*.o
	$(CC) $(CFLAGS) -c $(shell pwd)/$< 
 
# .cpp.o :
# 	@ echo Compiling $(<F) ...
# 	@rm -f $*.o
# 	$(CXX) $(CXFLAGS) -c `pwd`/$< $(CCOUT)
# 
# .cxx.o :
# 	@ echo Compiling $(<F) ...
# 	@rm -f $*.o
# 	$(CXX) $(CXFLAGS) -c `pwd`/$< $(CCOUT)
# 
# .f :
# 	@ echo Compiling $(<F) and linking into $(@F) ...
# 	@rm -f $@
# 	$(FC) $(FFLAGS) `pwd`/$< $(LDFLAGS) -o $@
# 
# .for :
# 	@ echo Compiling $(<F) and linking into $(@F) ...
# 	@rm -f $@
# 	$(FC) $(FFLAGS) `pwd`/$< $(LDFLAGS) -o $@
# 
# .c :
# 	@ echo Compiling $(<F) and linking into $(@F) ...
# 	@rm -f $@
# 	$(CC) $(CFLAGS) `pwd`/$< $(LDFLAGS) -o $@ $(CCOUT)
# 
# .cpp :
# 	@ echo Compiling $(<F) and linking into $(@F) ...
# 	@rm -f $*.o
# 	$(CXX) $(CXFLAGS) `pwd`/$< $(LDFLAGS) -o $@ $(CCOUT)
# 
# .cxx :
# 	@ echo Compiling $(<F) and linking into $(@F) ...
# 	@rm -f $*.o
# 	$(CXX) $(CXFLAGS) `pwd`/$< $(LDFLAGS) -o $@ $(CCOUT)
# 
# .c.e:
# 	$(CC) $(CFLAGS) -E `pwd`/$< > $@

